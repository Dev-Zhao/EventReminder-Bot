Index: web.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from __future__ import print_function\r\nimport sys\r\nimport os\r\nimport flask\r\nimport requests\r\n\r\nimport google.oauth2.credentials\r\nimport google_auth_oauthlib.flow\r\nimport googleapiclient.discovery\r\n\r\n# This variable specifies the name of a file that contains the OAuth 2.0\r\n# information for this application, including its client_id and client_secret.\r\nCLIENT_SECRETS_FILE = \"client_secret_464056054365-n17ssc4td11rte9fgf8jb3v5vi7e9v9e.apps.googleusercontent.com.json\"\r\n\r\n# This OAuth 2.0 access scope allows for full read/write access to the\r\n# authenticated user's account and requires requests to use an SSL connection.\r\nSCOPES = ['https://www.googleapis.com/auth/calendar']\r\nAPI_SERVICE_NAME = 'calendar'\r\nAPI_VERSION = 'v3'\r\n\r\napp = flask.Flask(__name__)\r\n# Note: A secret key is included in the sample so that it works.\r\n# If you use this code in your application, replace this with a truly secret\r\n# key. See https://flask.palletsprojects.com/quickstart/#sessions.\r\napp.secret_key = b\"\\xec\\x15,]\\xbd\\xe6\\xeb\\xd2\\xf0'\\x86(Xx\\xdd\\x9b\\x91i-OC\\x91Y\\xd6\"\r\n\r\n\r\n@app.route('/')\r\ndef index():\r\n  return flask.render_template('index.html')\r\n\r\n\r\n@app.route('/test')\r\ndef test_api_request():\r\n  if 'credentials' not in flask.session:\r\n    return flask.redirect('authorize')\r\n\r\n  # Load credentials from the session.\r\n  credentials = google.oauth2.credentials.Credentials(\r\n      **flask.session['credentials'])\r\n\r\n  calendar = googleapiclient.discovery.build(\r\n      API_SERVICE_NAME, API_VERSION, credentials=credentials)\r\n\r\n  files = calendar.calendarList().list(pageToken=None).execute()\r\n\r\n  # Save credentials back to session in case access token was refreshed.\r\n  # ACTION ITEM: In a production app, you likely want to save these\r\n  #              credentials in a persistent database instead.\r\n  flask.session['credentials'] = credentials_to_dict(credentials)\r\n\r\n  return flask.jsonify(**files)\r\n\r\n\r\n@app.route('/authorize')\r\ndef authorize():\r\n  # Create flow instance to manage the OAuth 2.0 Authorization Grant Flow steps.\r\n  flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(\r\n      CLIENT_SECRETS_FILE, scopes=SCOPES)\r\n\r\n  # The URI created here must exactly match one of the authorized redirect URIs\r\n  # for the OAuth 2.0 client, which you configured in the API Console. If this\r\n  # value doesn't match an authorized URI, you will get a 'redirect_uri_mismatch'\r\n  # error.\r\n  flow.redirect_uri = flask.url_for('oauth2callback', _external=True)\r\n\r\n  authorization_url, state = flow.authorization_url(\r\n      # Enable offline access so that you can refresh an access token without\r\n      # re-prompting the user for permission. Recommended for web server apps.\r\n      access_type='offline',\r\n      # Enable incremental authorization. Recommended as a best practice.\r\n      include_granted_scopes='true')\r\n\r\n  # Store the state so the callback can verify the auth server response.\r\n  flask.session['state'] = state\r\n\r\n  print(authorization_url, file=sys.stderr)\r\n  data = {'authorization_url': authorization_url}\r\n  return data\r\n\r\n\r\n@app.route('/oauth2callback')\r\ndef oauth2callback():\r\n  # Specify the state when creating the flow in the callback so that it can\r\n  # verified in the authorization server response.\r\n  state = flask.session['state']\r\n\r\n  flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(\r\n      CLIENT_SECRETS_FILE, scopes=SCOPES, state=state)\r\n  flow.redirect_uri = flask.url_for('oauth2callback', _external=True)\r\n\r\n  # Use the authorization server's response to fetch the OAuth 2.0 tokens.\r\n  authorization_response = flask.request.url\r\n  flow.fetch_token(authorization_response=authorization_response)\r\n\r\n  # Store credentials in the session.\r\n  # ACTION ITEM: In a production app, you likely want to save these\r\n  #              credentials in a persistent database instead.\r\n  credentials = flow.credentials\r\n  flask.session['credentials'] = credentials_to_dict(credentials)\r\n\r\n  return flask.redirect(flask.url_for('test_api_request'))\r\n\r\n\r\n@app.route('/revoke')\r\ndef revoke():\r\n  if 'credentials' not in flask.session:\r\n    return ('You need to <a href=\"/authorize\">authorize</a> before ' +\r\n            'testing the code to revoke credentials.')\r\n\r\n  credentials = google.oauth2.credentials.Credentials(\r\n    **flask.session['credentials'])\r\n\r\n  revoke = requests.post('https://oauth2.googleapis.com/revoke',\r\n      params={'token': credentials.token},\r\n      headers = {'content-type': 'application/x-www-form-urlencoded'})\r\n\r\n  status_code = getattr(revoke, 'status_code')\r\n  if status_code == 200:\r\n    return('Credentials successfully revoked.' + print_index_table())\r\n  else:\r\n    return('An error occurred.' + print_index_table())\r\n\r\n\r\n@app.route('/clear')\r\ndef clear_credentials():\r\n  if 'credentials' in flask.session:\r\n    del flask.session['credentials']\r\n  return ('Credentials have been cleared.<br><br>' +\r\n          print_index_table())\r\n\r\n\r\ndef credentials_to_dict(credentials):\r\n  return {'token': credentials.token,\r\n          'refresh_token': credentials.refresh_token,\r\n          'token_uri': credentials.token_uri,\r\n          'client_id': credentials.client_id,\r\n          'client_secret': credentials.client_secret,\r\n          'scopes': credentials.scopes}\r\n\r\n\r\ndef print_index_table():\r\n    resp = flask.make_response(flask.render_template(\"index.html\"))\r\n    resp.mimetype = 'text/plain'\r\n    return resp\r\n\r\n\r\nif __name__ == '__main__':\r\n  # When running locally, disable OAuthlib's HTTPs verification.\r\n  # ACTION ITEM for developers:\r\n  #     When running in production *do not* leave this option enabled.\r\n  os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'\r\n\r\n  # Specify a hostname and port that are set as a valid redirect URI\r\n  # for your API project in the Google API Console.\r\n  app.run('https://event-reminder-discord-bot.herokuapp.com', 8080, debug=True)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web.py	(revision a744f1b62d409f5953abde1dc907c8954dcad42c)
+++ web.py	(date 1619978781469)
@@ -69,7 +69,8 @@
       # re-prompting the user for permission. Recommended for web server apps.
       access_type='offline',
       # Enable incremental authorization. Recommended as a best practice.
-      include_granted_scopes='true')
+      include_granted_scopes='true',
+      state=flask.request.args.get("uid"))
 
   # Store the state so the callback can verify the auth server response.
   flask.session['state'] = state
Index: cogs/GoogleAPI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import discord\r\nimport requests\r\nfrom discord.ext import commands\r\n\r\n\r\nclass GoogleAPI(commands.Cog):\r\n    def __init__(self, client):\r\n        self.client = client\r\n\r\n    #commands\r\n    @commands.command(aliases = ['import'])\r\n    async def importFromGoogle(self, ctx):\r\n        response = requests.get(\"https://event-reminder-discord-bot.herokuapp.com/authorize\")\r\n        data = response.json()\r\n        await ctx.send(data['authorization_url'])\r\n\r\n\r\ndef setup(client):\r\n    client.add_cog(GoogleAPI(client))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cogs/GoogleAPI.py	(revision a744f1b62d409f5953abde1dc907c8954dcad42c)
+++ cogs/GoogleAPI.py	(date 1619978903238)
@@ -1,6 +1,7 @@
 import discord
 import requests
 from discord.ext import commands
+import pymongo
 
 
 class GoogleAPI(commands.Cog):
@@ -9,8 +10,9 @@
 
     #commands
     @commands.command(aliases = ['import'])
-    async def importFromGoogle(self, ctx):
-        response = requests.get("https://event-reminder-discord-bot.herokuapp.com/authorize")
+    async def importFromGoogle(self, ctx, email):
+        params = {"uid": ctx.message.author.id}
+        response = requests.get("https://event-reminder-discord-bot.herokuapp.com/authorize", params=params)
         data = response.json()
         await ctx.send(data['authorization_url'])
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"BranchesTreeState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"81fd148b-0b7c-4a80-9be6-82acae9f97bb\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cogs/GoogleAPI.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cogs/GoogleAPI.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/web.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/web.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1rxPuZXh0FHScgNgei426lDx2zv\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/cogs\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Charlie\\PycharmProjects\\EventReminder-Bot\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"81fd148b-0b7c-4a80-9be6-82acae9f97bb\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1619927759869</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1619927759869</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.History.Properties\">\r\n    <option name=\"COLUMN_ORDER\">\r\n      <list>\r\n        <option value=\"0\" />\r\n        <option value=\"2\" />\r\n        <option value=\"3\" />\r\n        <option value=\"1\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"1217\" y=\"475\" key=\"#Python\" timestamp=\"1619961015798\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1217\" y=\"475\" key=\"#Python/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619961015798\" />\r\n    <state x=\"1021\" y=\"499\" key=\"#com.intellij.fileTypes.FileTypeChooser\" timestamp=\"1619910474938\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1021\" y=\"499\" key=\"#com.intellij.fileTypes.FileTypeChooser/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619910474938\" />\r\n    <state x=\"1003\" y=\"614\" key=\"#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog\" timestamp=\"1619968003542\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1003\" y=\"614\" key=\"#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619968003542\" />\r\n    <state x=\"1200\" y=\"481\" key=\"FileChooserDialogImpl\" timestamp=\"1619913910675\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1200\" y=\"481\" key=\"FileChooserDialogImpl/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619913910675\" />\r\n    <state x=\"1162\" y=\"428\" key=\"SettingsEditor\" timestamp=\"1619911466262\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1162\" y=\"428\" key=\"SettingsEditor/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619911466262\" />\r\n    <state x=\"819\" y=\"533\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1619975432753\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"819\" y=\"533\" key=\"Vcs.Push.Dialog.v2/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619975432753\" />\r\n    <state x=\"907\" y=\"564\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1619922780722\">\r\n      <screen x=\"0\" y=\"0\" width=\"2560\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"907\" y=\"564\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.2560.1400@0.0.2560.1400\" timestamp=\"1619922780722\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision a744f1b62d409f5953abde1dc907c8954dcad42c)
+++ .idea/workspace.xml	(date 1619978485385)
@@ -98,10 +98,10 @@
       <screen x="0" y="0" width="2560" height="1400" />
     </state>
     <state x="1162" y="428" key="SettingsEditor/0.0.2560.1400@0.0.2560.1400" timestamp="1619911466262" />
-    <state x="819" y="533" key="Vcs.Push.Dialog.v2" timestamp="1619975432753">
+    <state x="819" y="533" key="Vcs.Push.Dialog.v2" timestamp="1619975631729">
       <screen x="0" y="0" width="2560" height="1400" />
     </state>
-    <state x="819" y="533" key="Vcs.Push.Dialog.v2/0.0.2560.1400@0.0.2560.1400" timestamp="1619975432753" />
+    <state x="819" y="533" key="Vcs.Push.Dialog.v2/0.0.2560.1400@0.0.2560.1400" timestamp="1619975631729" />
     <state x="907" y="564" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1619922780722">
       <screen x="0" y="0" width="2560" height="1400" />
     </state>
